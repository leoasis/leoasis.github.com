<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Leonardo Garcia Crespo</title>
 <link href="https://leoasis.github.io/atom.xml" rel="self"/>
 <link href="https://leoasis.github.io/"/>
 <updated>2017-06-26T16:49:05-03:00</updated>
 <id>https://leoasis.github.io</id>
 <author>
   <name>Leonardo Garcia Crespo</name>
 </author>

 
 <entry>
   <title>Reparenting a Component</title>
   <link href="https://leoasis.github.io/posts/2017/06/26/reparenting-a-component"/>
   <updated>2017-06-26T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2017/06/26/reparenting-a-component</id>
   <content type="html">&lt;p&gt;When working with React, we almost never have to think about the underlying &lt;a href=&quot;https://facebook.github.io/react/docs/reconciliation.html&quot;&gt;reconciliation algorithm&lt;/a&gt; that calculates the update to the DOM. It just works: we write our components with the UI logic inside the render function, handle events and perform state changes, and bam!, we’re done. If we’re working with arrays, the reconciliation algorithm may ask us to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; attribute, but that’s okay when you &lt;a href=&quot;https://facebook.github.io/react/docs/lists-and-keys.html&quot;&gt;understand how keys work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In most cases, especially if the data is flowing exclusively via props, it doesn’t matter if we’re updating a component or mounting a new one. Since the data to render is all provided to the component, the final result will be the same if the component got updated, or if React had to mount it because it wasn’t there.&lt;/p&gt;

&lt;p&gt;But there are cases where the reconciliation becomes a leaky abstraction. If we’re relying on the component’s local state for something, or if we’re dealing with state that lives in the DOM (like selection state inside form inputs), then it &lt;em&gt;does&lt;/em&gt; matter if we’re updating a component or creating a new one, because that would mean we will &lt;em&gt;retain&lt;/em&gt; that internal state, or wipe it and start with a fresh one.&lt;/p&gt;

&lt;p&gt;So why a leaky abstraction? That’s because you need to know &lt;em&gt;when&lt;/em&gt; React will decide to mount or update a component. To know a bit more about it, I suggest you to &lt;a href=&quot;TODO&quot;&gt;read the documentation about the heuristics inside the reconciliation algorithm&lt;/a&gt;. Two important ones relevant to this post are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React will unmount the old tree of components and remount a new one if the new root of the tree is of a different type than the previous one.&lt;/li&gt;
  &lt;li&gt;Keys to assign identity to a component while diffing is only supported locally (i.e. inside a component’s render function) for siblings, but it’s not able to identify and “reparent” between completely different nodes in the component tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my particular use case, I had a panel that collapsed or expanded showing some items depending on the page where it was rendered. But that panel was nested in a component that would become unmounted whenever the page changed, because the component type was already different a couple of levels above in the tree, making the reconciliation algorithm wipe the subtree and create a new one with the component with the new type as a root.&lt;/p&gt;

&lt;p&gt;That collapse and expansion was done with an animation whenever we detected the component’s children &lt;em&gt;changed&lt;/em&gt;, so I needed to have a way to detect that change. But since the component was being unmounted and remounted, the animation never triggered, as the state never technically changed.&lt;/p&gt;

&lt;p&gt;Ideally, that could have been solved by designing the component tree so that the reconciliation worked &lt;em&gt;with&lt;/em&gt; us (instead of against us). For example, if this panel lived in a sidebar that is shown in both pages, a valid solution would have been to move that sidebar component to a layout component, and only re-render the main content whenever the url changes. That way, the sidebar would be updated and not remounted because the parents’ types would be the same.&lt;/p&gt;

&lt;p&gt;That may have been an option in my particular case, even though we didn’t go with it for other reasons. But anyway, I believe there are plenty of valid use cases where doing that is not possible, at least not easily. In those cases, you need to resort to other solutions.&lt;/p&gt;

&lt;p&gt;So I tried to make reparenting work. This is what I came up with to solve it, I will explain what’s going on below, but here is the code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/e1d093141e5f22e4e1e346e6726dfa5b.js?file=01.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And to use it, you need to wrap the component that can be reparented in this &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; component, in all the places where it should be rendered, like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/e1d093141e5f22e4e1e346e6726dfa5b.js?file=02.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Thanks to React’s nice API, the way to use this component is still pretty straightforward. There’s nothing more than rendering components and passing props.&lt;/p&gt;

&lt;p&gt;So let’s talk about what’s going on in the implementation of that component. The trick of all this is to &lt;em&gt;keep the references of the DOM nodes&lt;/em&gt; that React uses to render a component and then call &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt; on them, so that React updates whatever instance was previously rendered in those nodes.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; component renders a single div, to which we attach a ref to hold on to the DOM element instance. Then in the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; lifecycle hooks, we get (or create if it doesn’t exist yet) a DOM node based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt; prop we received, append it to our div if we didn’t already, and tell React to render the children into that DOM node. If the &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt; is the same, the DOM node we get will be the same, so rendering into the same DOM node will make React perform the reconciliation there. Since we are rendering the same type of element, the component will be &lt;em&gt;updated&lt;/em&gt; by React instead of mounted.&lt;/p&gt;

&lt;p&gt;When the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; component unmounts, it will remove the DOM node we were using to render the children, but we’ll still keep the reference around in a global object. Notice that we don’t unmount the React instance in that node yet. We wait a bit for that, in case another &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; component attempts to use it (by rendering with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;ui&lt;/code&gt; prop). If that happens, we will keep the DOM node reference around since it was claimed. If that doesn’t happen, then we effectively unmount the React instance in that node and we remove the reference so that it can be garbage collected by the JS runtime.&lt;/p&gt;

&lt;p&gt;Because we don’t unmount the instance if it gets used by another &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; instance, we effectively reparented the DOM node and the instance, and the next time it receives a render, it will update the instance, instead of mounting it.&lt;/p&gt;

&lt;p&gt;One more thing to notice is that the example is using &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.unstable_renderSubtreeIntoContainer&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt;. This is because the former allows to propagate the &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; into that subtree, which is not possible if we called &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt;, since it assumes we want to render a completely isolated tree. The fact that the name contains &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable&lt;/code&gt; in it should be enough warning not to use it, but there is no other way to achieve this context propagation as far as I know. Maybe this method will become stable in a future version of React, or a better solution will be available.&lt;/p&gt;

&lt;p&gt;Here is an example of how you see it in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-06-26-reparenting-a-component-4f9f379342207f7eca23d8886f149543ef920927d6c89ca39f767d93c1487043.gif&quot; width=&quot;501&quot; height=&quot;111&quot; alt=&quot;2017-06-26-reparenting-a-component.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the state is preserved (the click count and the text inside the input) when switching pages, which is destroying the entire tree for the old page and creating the tree for the new page.&lt;/p&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;/h2&gt;

&lt;p&gt;As you may imagine, no solution is perfect, and actually this solution has a couple of important problems. One problem is that it relies on the user assigning unique global &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt;s. If you ever render two &lt;code class=&quot;highlighter-rouge&quot;&gt;Reparentable&lt;/code&gt; components at the same time with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt;, the last one to mount will steal the DOM node from the other one, which is surely not what you want.&lt;/p&gt;

&lt;p&gt;Another problem is the hacky way we have to know if the DOM node is going to be reparented: we keep the node alive for some time (in our case, we wait until the next event loop tick), and after that we unmount and remove the reference. But the truth is that we can never be sure if the node is going to be used again at any point in the future. So waiting “for a bit” is not reliable.&lt;/p&gt;

&lt;p&gt;If you are interested in this problem, and similar related problems, I suggest you to go to this thread and read it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/chenglou/34b155691a6f58091953&quot;&gt;https://gist.github.com/chenglou/34b155691a6f58091953&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some great ideas on how to solve this problem properly in that thread, and I hope that at some point those ideas become useful to bake a reparenting solution right inside React in the future.&lt;/p&gt;

&lt;p&gt;This solution worked well for us, it’s far from perfect, but at least shows the idea behind reusing nodes with React instances mounted on them to support reparenting.&lt;/p&gt;

&lt;p&gt;Hope you find this useful! If you had a similar problem and you solved it differently, be sure to leave a comment or tweet to me and share your approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React Patterns - Render Callback</title>
   <link href="https://leoasis.github.io/posts/2017/03/27/react-patterns-render-callback"/>
   <updated>2017-03-27T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2017/03/27/react-patterns-render-callback</id>
   <content type="html">&lt;p&gt;I wanted to start documenting some React patterns that are common when developing. Most importantly because doing this will make me do some research in order to understand more accurately when those patterns are a good fit and when they aren’t, and what are the tradeoffs involved in using or not using them. Hope you find these posts as useful as they are for me!&lt;/p&gt;

&lt;p&gt;So today, I want to start with this pattern called “Render callbacks”. I think the name was coined by &lt;a href=&quot;https://twitter.com/ryanflorence&quot;&gt;Ryan Florence&lt;/a&gt; on Twitter, not happy with the alternative name “function as child”, which was not entirely precise, as this pattern isn’t only constrained to the &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; prop.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-it&quot;&gt;When to use it&lt;/h2&gt;

&lt;p&gt;You want to extract some functionality you have in a component, the parent, into another component, that will be rendered as a child of that parent. The functionality can’t entirely live in the child component, and thus configuring it with simple value props is not enough. You want the child to do something, but then some part of the logic requires the parent to provide it with something further to do.&lt;/p&gt;

&lt;p&gt;Basically what you want is a way for the parent to provide some logic to the child, and the child have the control on how to execute that logic.&lt;/p&gt;

&lt;h2 id=&quot;what-it-is&quot;&gt;What it is&lt;/h2&gt;

&lt;p&gt;You provide the child component with a function prop that will be called at some point internally in the child. This prop is called the “render callback”. That function is able to receive parameters that will be assigned by the child the moment it is called, with the information the child has when doing its stuff. The child is the one to decide if it wants to call that function or not, again depending on its internal logic.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=01.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the child, simply call the prop as a function wherever (and if) it makes sense, passing the relevant parameters to it:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=02.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s see an example to make that a little clearer…&lt;/p&gt;

&lt;h2 id=&quot;an-example-component-to-do-data-fetching&quot;&gt;An example: Component to do data fetching&lt;/h2&gt;

&lt;p&gt;Let’s say you have a component that needs to fetch some data in order to render it somehow. Maybe you’d do something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=03.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We’re using the component’s lifecycle and state to accomplish what we want. We store in the state wether we have loaded data or not, wether we had an error from the request or not, and the data itself, when the request succeeds. Then in the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt; lifecycle hook, we go and perform the fetch, using the necessary props, and update the state when we have a successful request, and when we have a failure.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: If we wanted a more complete example, we’d also have to add code in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillReceiveProps&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; to handle the case where the props relevant to the fetch request change (&lt;code class=&quot;highlighter-rouge&quot;&gt;userId&lt;/code&gt; in this case), and perform a new request (and maybe cancel/ignore the previous one if it’s still inflight). For simplicity, this is not included in the example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we have our render function, that uses all that state and either renders a loading screen, an error message, or the actual results in a nice way, accordingly.&lt;/p&gt;

&lt;p&gt;Let’s think about what this component is doing. We’re having multiple responsibilities: handling the logic around fetching data, coping with loading and error states, and also rendering all those states. What we want is to extract the logic regarding fetching data, dealing with the different states, and rendering the loading and error states. We only care about rendering the successful data in our component.&lt;/p&gt;

&lt;p&gt;Let’s start writing something about how we’d want to use this component in our original one. We know for sure we’ll pass the necessary parameters to fetch the data as props, in this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;userId&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=04.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now, in order to &lt;em&gt;provide&lt;/em&gt; the child component with the necessary info to render the data when the request is successful, we’ll provide a render callback prop. That render callback should receive the data as its first parameter:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=05.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;With that usage in mind, this is the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;FetchStuff&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=06.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice how we call &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.renderData(...)&lt;/code&gt; as a function and pass the relevant parameters into it. That’s the pattern in action. We extracted all the functionality that we didn’t want to live in &lt;code class=&quot;highlighter-rouge&quot;&gt;StuffList&lt;/code&gt; and moved it into a reusable component that accepts a function to determine how to render the data it fetched.&lt;/p&gt;

&lt;h2 id=&quot;another-example-a-tooltip&quot;&gt;Another example: A tooltip&lt;/h2&gt;

&lt;p&gt;Say you want to use a tooltip component. This is one way to do it:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=07.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We wrap some element around a &lt;code class=&quot;highlighter-rouge&quot;&gt;TooltipTrigger&lt;/code&gt; component, which wraps the children in an element that when hovered, will show the tooltip. We specify the content of the tooltip as a prop that accepts a react element. A simple implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;TooltipTrigger&lt;/code&gt; could be something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=08.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice we only render the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tooltip&lt;/code&gt; component whenever we’re hovering the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;, and we don’t render it otherwise. Ok that was fairly easy, right?&lt;/p&gt;

&lt;p&gt;Let’s think about some potential problems this solution has: What if the content of the tooltip is complex enough that you don’t want to create the react elements until you really need to show them? Or maybe you don’t have the necessary information for that content yet. It’d be really nice to be able to provide the contents in a lazy way, such that the elements are only created when the &lt;code class=&quot;highlighter-rouge&quot;&gt;TooltipTrigger&lt;/code&gt; considers it’s needed. Sounds like a nice use case for a &lt;em&gt;render callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we didn’t wrap the content in a render callback, the elements would be created right away even when the tooltip decides not to render them yet. Fairly enough, these are just lightweight objects that only &lt;em&gt;describe&lt;/em&gt; what the UI will look like, but it’s still work we don’t need to do. Also, if the content depends on getting the info from data we don’t yet have, trying to access it right away would cause a runtime error, especially if we need to access nested properties.&lt;/p&gt;

&lt;p&gt;So now, let’s try passing a render callback instead of passing a react element as the content. Let’s see how that looks in the code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=09.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And this is how we’d modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;TooltipTrigger&lt;/code&gt; implementation:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=10.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here we are using the render callback to render some content whenever the tooltip is hovered. The only change needed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TooltipTrigger&lt;/code&gt; implementation is the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.tooltipContent&lt;/code&gt;, which now is a function and we have to call it to get the elements.&lt;/p&gt;

&lt;p&gt;In this case, compared to the previous example, we used the render callback pattern in the tooltip to delegate the responsibility of wether to render something or not, to another component.&lt;/p&gt;

&lt;h2 id=&quot;more-examples-in-the-wild&quot;&gt;More examples in the wild&lt;/h2&gt;

&lt;p&gt;There are a lot of examples out there that make use of this pattern. Let’s see some of those with a short explanation of each.&lt;/p&gt;

&lt;h3 id=&quot;react-router&quot;&gt;React router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactTraining/react-router&quot;&gt;https://github.com/ReactTraining/react-router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uses the pattern to do both things actually. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Route&lt;/code&gt; component fetches the location data and query string params from the history, and passes that info to the function provided as render callback. Also, it decides wether to call the function or not depending on wether the route matches the path or not.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=11.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;react-measure&quot;&gt;React Measure&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/souporserious/react-measure&quot;&gt;https://github.com/souporserious/react-measure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Measures the dimensions of an element (width, height, top, bottom, etc) and provides it as the parameter of the render callback, which allows the parent component to do any kind of crazy logic with the dimensions.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=12.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What’s interesting here is that the render callback in this case is passed as &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt;. This may look like something special is going on here, but remember that in React, the &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; prop is just another prop, only that it has some syntactic sugar that allows it to be passed as the content of the JSX tag.&lt;/p&gt;

&lt;h3 id=&quot;react-media&quot;&gt;React Media&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reacttraining/react-media&quot;&gt;https://github.com/reacttraining/react-media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same idea as before, but in this case the parameter that is injected into the render callback is wether the media query specified as prop matches or not:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=13.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;react-motion&quot;&gt;React-Motion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chenglou/react-motion&quot;&gt;https://github.com/chenglou/react-motion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A library that let’s you create animations. You specify the animation configuration as props to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Motion&lt;/code&gt; component, and you also pass a render callback as the children. The callback gets called repeatedly with the intermediate values of the calculated animation, rendering all the intermediate states of the UI.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=14.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;react-natives-listview&quot;&gt;React Native’s ListView&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/listview.html&quot;&gt;https://facebook.github.io/react-native/docs/listview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One way to create lists in React Native is with a &lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt;, provided in the core React Native library. Instead of directly rendering the list of items as children of the component, it defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderRow&lt;/code&gt; prop which is a render callback that specifies how to render a row given the data for that item, which is specified in another prop called the &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt;. In this case, the render callback pattern is used to specify placeholders for custom content that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt; can use internally while rendering the list. This also allows for internal performance optimizations, since the component can decide when to render each item in a granular way.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=15.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;/h2&gt;

&lt;p&gt;We’ve already seen some of the advantages of this pattern. The most obvious one is that it helps to decouple your rendering logic from the way to get the necessary data to actually render, or the logic to conditionally render that.&lt;/p&gt;

&lt;p&gt;Another benefit, is that because we’re using components, the render method is still declarative, and it’s easy to see at a glance what’s going on.&lt;/p&gt;

&lt;p&gt;Also, contrary to using &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;Higher order components (HoC)&lt;/a&gt;, you don’t pollute your props namespace with the props that can be potentially injected by HoCs. In render callbacks, the injected stuff comes as parameters.&lt;/p&gt;

&lt;h2 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h2&gt;

&lt;p&gt;No pattern comes without its drawbacks. As we all know, everything is a matter of tradeoffs…&lt;/p&gt;

&lt;p&gt;One problem the pattern has, is that since we’re creating a function inline in every render, that may conflict with some optimizations that could be done in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; hook in the component that receives the render callback. Since the function is a new instance every time, shallow comparison of the props is no longer a valid solution. You could probably hoist the render callback or pre-bind it if using &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, but that’d reduce the advantage of being able to quickly scan the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method and see what’s going on. This is probably subjective though.&lt;/p&gt;

&lt;p&gt;This pattern also is not suitable when the data required to render something is also needed in some life cycle hook. This includes being able to do side effects, because those cannot be done in the render method, so you need to do them in some lifecycle hook that allows them.&lt;/p&gt;

&lt;p&gt;This is because the render callback is passed as a prop to another component in the render method, so you don’t have access to those parameters outside the function, and particularly not in the lifecycle hooks of the parent. If you need that though, you can pass the parameters as props into another component that contains the rendering logic you previously had inlined in the render callback. At that point, you’re dealing with a regular component that gets its data injected via props. Another option would be to use a &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;Higher order component (HoC)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One caveat with this approach that you could run into pretty easily, is potentially using stale props or state inside the render callback. This happens if you use &lt;em&gt;destructuring&lt;/em&gt; of props or state and use those values inside the render callback as a closure. Here’s an example of this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=16.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This may be a contrived example, but tends to happen often in practice. In this case, if you attempted to render the &lt;code class=&quot;highlighter-rouge&quot;&gt;Greeter&lt;/code&gt; component more than once with a different &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; prop, you’d still be seeing the message that updates every second using the first prop ever passed. That’s because the first &lt;code class=&quot;highlighter-rouge&quot;&gt;renderEverySecond&lt;/code&gt; render callback is being stored internally inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock&lt;/code&gt; component and that’s the function being executed every second. Even if future renders of &lt;code class=&quot;highlighter-rouge&quot;&gt;Greeter&lt;/code&gt; passed a new &lt;code class=&quot;highlighter-rouge&quot;&gt;renderEverySecond&lt;/code&gt; function with the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; prop being properly closed over, since the first one is being used, we only ever see the first name.&lt;/p&gt;

&lt;p&gt;One fix would be to make &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock&lt;/code&gt; properly use its most current &lt;code class=&quot;highlighter-rouge&quot;&gt;renderEverySecond&lt;/code&gt; prop, which is achieved by not destructuring it in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=17.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Another fix would be to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;renderEverySecond&lt;/code&gt; render callback use the most current value for &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, again by avoiding destructuring and using directly the most current set of &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/367b556688e1aa0fb21f9b4d966079d6.js?file=18.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;One final drawback that render callbacks have is that since they compose dynamically at &lt;em&gt;render time&lt;/em&gt;, they don’t allow optimizations that could be done if the parameters to be injected were static. You could treat some props received by the child component as &lt;em&gt;static&lt;/em&gt; and not update the render callback parameters when they change to have those optimizations, but that kind of breaks the component contract, since the user of that component would expect the prop change to be taken into account. Using things like &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;Higher order components&lt;/a&gt; may be a better solution for static configuration of a component, which move that said configuration to &lt;em&gt;declaration time&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We saw what the &lt;em&gt;render callback&lt;/em&gt; pattern is, how to use it and when it helps us when developing with React. We also saw some examples in the wild where it’s being used, and we also analized (some of) its advantages and disadvantages, mostly compared to its “nemesis” the &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;Higher order component&lt;/a&gt;, which is also a pattern to solve similar problems.&lt;/p&gt;

&lt;p&gt;It seems that for most of the use cases, it ends up being a matter of taste wether to choose the render callback pattern, or the &lt;a href=&quot;https://facebook.github.io/react/docs/higher-order-components.html&quot;&gt;Higher order component&lt;/a&gt; pattern. Both let you achieve the same thing, but choose different tradeoffs. You can even choose one patter to solve some things in your app, and the other one to solve other things. They can live happily together.&lt;/p&gt;

&lt;p&gt;Hope this post taught you something, made your ideas clearer, or at least didn’t tell you anything incorrect (if so, add a comment and will fix!). Also feel free to comment to add more advantages or disadvantages that I may have missed.&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Think Twice (or Thrice) Before Using Angular</title>
   <link href="https://leoasis.github.io/posts/2014/10/28/think-twice-or-thrice-before-using-angular"/>
   <updated>2014-10-28T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2014/10/28/think-twice-or-thrice-before-using-angular</id>
   <content type="html">&lt;p&gt;&lt;em&gt;(Special thanks to &lt;a href=&quot;https://twitter.com/_joliv&quot;&gt;@_joliv&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sgianazza&quot;&gt;@sgianazza&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/rafaelchiti&quot;&gt;@rafaelchiti&lt;/a&gt; for reviewing and sending feedback.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the past two years or so I’ve been developing in my full time job with Angular for client side Javascript. While I love learning new stuff, I was never sold on it. I didn’t use it in my personal, fun or freelance projects where the tech stack was for me to choose.&lt;/p&gt;

&lt;p&gt;This post is to write down what I, after said two years, found that’s wrong about this framework. I’m doing this to have my thoughts clearly written down and be as objective as I can possibly be when it comes to choosing a library/framework. Also I hope someone would read this so that she can follow this advise, or not, but at least we can discuss about it. I truly believe that despite being the (currently) most popular framework out there, it is not the best choice you could make.&lt;/p&gt;

&lt;p&gt;Ok let’s start with this!&lt;/p&gt;

&lt;h2 id=&quot;angular-embraces-mutability&quot;&gt;Angular embraces mutability&lt;/h2&gt;

&lt;p&gt;Almost everything in Angular revolves around keeping references to things. You don’t have to modify those references, otherwise Angular won’t keep track of the same object and it won’t detect changes on the lost one anymore. In order for angular to do its job, it expects you to mutate the object that is being referenced, so that its digest cycle can track the changes.&lt;/p&gt;

&lt;p&gt;And why this is bad you say?&lt;/p&gt;

&lt;p&gt;Well, to start with, you need to keep a mental reference of the current state of the app. When mutating things around, you need to think about mutation order, because you may get different results based on the intermediate states and you cannot track where the change comes from very easily, since references can be kept anywhere and can be mutated freely. This doesn’t happen with immutable data, since you always have read-only values with functions that return new objects whenever you perform an action on them. So mutations in other contexts will only create new read-only values, which will not interfere with the one you’re working with at a given place. This has a simpler mental footprint and is easier to think about when looking at different parts of your code.&lt;/p&gt;

&lt;p&gt;Another disadvantage is that it is harder to test. Mutations are imperative, they are a set of instructions to make your code go from state A to state B. Since you write the transition code yourself, you need to test that if you want to be confident on the outcome of it. The number of transitions grows (worst case) quadratically depending on the number of states your app has. Testing that amount of different paths just doesn’t scale.&lt;/p&gt;

&lt;p&gt;One last disadvantage is expensive diffing checks, since it involves having to test all the properties of two given objects to see if any one is different. With immutables, you can be sure that if the references are the same, the object didn’t change, which is the most common case.&lt;/p&gt;

&lt;p&gt;There are a lot more, but you get the idea.&lt;/p&gt;

&lt;h2 id=&quot;scope-inheritance-design-is-flawed&quot;&gt;Scope inheritance design is flawed&lt;/h2&gt;

&lt;p&gt;Have you ever had &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;this issue&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;In case you don’t want to go to the link and read:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“…Scope inheritance is normally straightforward, and you often don’t even need to know it is happening… until you try 2-way data binding (i.e., form elements, ng-model) to a primitive (e.g., number, string, boolean) defined on the parent scope from inside the child scope. It doesn’t work the way most people expect it should work. What happens is that the child scope gets its own property that hides/shadows the parent property of the same name….”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That problem is due to how scope inheritance works, which relies on normal prototype inheritance. So some may claim it is not a bug in Angular, it is how prototypical inheritance works. But I say that the fact this happens to every developer from time to time, be it new or experienced, &lt;em&gt;is&lt;/em&gt; a problem with Angular, since it chose that API to interact with developers. It is actually such a common problem that it has its place in the Angular wiki (the previous link).&lt;/p&gt;

&lt;p&gt;If all developers step into the same problem when using some specific API, then there is a problem with that API. There is something that is not well thought of, and can (and should) be improved. Choosing an inheritance chain with scopes and having to &lt;em&gt;know&lt;/em&gt; which directive causes a new scope to be created and which not, is not a particularly good API.&lt;/p&gt;

&lt;h2 id=&quot;directives-are-too-low-level&quot;&gt;Directives are too low level&lt;/h2&gt;

&lt;p&gt;The directive linking function is like an all-inclusive hotel in the Caribbean: you can do pretty much anything you want. But also, you’re left on your own. You have this place to manipulate the DOM, manipulate the scope, manipulate services, interact with the associated controller, do transclusion, and whatnot. Given that there is no middle-ground abstraction to create custom components other than this, this is way too low level and leaves you pretty much with no clue of what to do here. It’s like an empty sheet of paper. Sometimes it’s easier to have something written and work from that, than to start on your own.&lt;/p&gt;

&lt;p&gt;I think the directive API should have some intermediate ways to do the common-case, in a simpler way than the current API provides.&lt;/p&gt;

&lt;h2 id=&quot;too-many-ways-to-define-a-service&quot;&gt;Too many ways to define a service&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Factories, Providers, Services, Values, Constants&lt;/em&gt;. Too many ways to define injectable components. You almost always use factories and values, and in some more complex cases you need some startup code and use a provider. In those cases you may also need to use a constant. &lt;em&gt;Services&lt;/em&gt; are just too specific and never had to use them in my entire experience with angular.&lt;/p&gt;

&lt;p&gt;In any case, there are way too many choices and if you’re not an experienced developer with the framework you may end up confused with what you need to use in your particular case. After all, you just need to create an object, and if you want it to be a factory, it’s not that hard to do one by hand, isnt’ it?&lt;/p&gt;

&lt;h2 id=&quot;reimplements-modules-instead-of-embracing-existing-ones&quot;&gt;Reimplements modules instead of embracing existing ones&lt;/h2&gt;

&lt;p&gt;Angular implements its own module system for tracking dependencies between components. It is a good thing when using angular on its own, or without any module system, but when you want to use one, you are redundantly wrapping angular modules in CommonJS or AMD modules to make them work in the rest of your app. Also, you cannot define dependencies other than other angular components in this way, so you get a solution that reinvents the wheel but only for its own needs.&lt;/p&gt;

&lt;p&gt;I think it would be wiser to embrace the existing work and be friendlier with code that lives outside angular.&lt;/p&gt;

&lt;h2 id=&quot;dirty-checking-the-model-data-does-not-scale&quot;&gt;Dirty checking the model data does not scale&lt;/h2&gt;

&lt;p&gt;Angular starts to get slow when there are more than 2000 bindings in your page. It is true that more than 2000 pieces of information at the same time are no good for humans to see, but the truth is that angular binding is not dependent on the visible elements on the page, but on the amount of data being watched on it. There may be a lot more watches of data than elements being shown, and that’s the actual problem with angular. It dirty checks on the data.&lt;/p&gt;

&lt;p&gt;Some other solutions, like React, do dirty checking at the view level, by diffing the DOM state using lightweight representations of it. This is way more performant, since this doesn’t depend on how much data you have, and it is directly proportional on the amount of DOM elements you have in your page, which directly corresponds to how well you design your pages for humans to use.&lt;/p&gt;

&lt;h2 id=&quot;api-is-halfway-there&quot;&gt;API is halfway there&lt;/h2&gt;

&lt;p&gt;Have you seen how the directive API looks in angular?&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'EAC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^?parentDirective'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;theBar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@someBaz'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is so cryptic. You need to rely on special characters, symbols and conventions in between to see what that actually does. That is not a good sign of a clear, easy to use API.
Same thing goes for the syntax of &lt;code class=&quot;highlighter-rouge&quot;&gt;ngOptions&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ngRepeat&lt;/code&gt;, for which I always need some documentation lookup to see how to structure the expression. Again, not clear.&lt;/p&gt;

&lt;h2 id=&quot;too-many-ways-to-do-the-same-thing-no-best-way-to-do-it&quot;&gt;Too many ways to do the same thing, no best way to do it&lt;/h2&gt;

&lt;p&gt;Angular provides a lot of ways to do the same thing, like different kinds of services (we saw that before). There’s also several ways to use a directive (element, attribute, class, comment, same scope, no scope, isolated scope), and several ways to use a controller. You can expose your controller functions using &lt;code class=&quot;highlighter-rouge&quot;&gt;controller-as&lt;/code&gt;, or you can just use normal controllers with an injected scope.&lt;/p&gt;

&lt;p&gt;All this adds into complexity, learning curve for new developers, lack of conventions, and lack of best practices to enforce. This is bad for the ecosystem around angular, both user-developers and library-developers.&lt;/p&gt;

&lt;h2 id=&quot;no-clear-way-to-tell-behavior-from-the-html&quot;&gt;No clear way to tell behavior from the html&lt;/h2&gt;

&lt;p&gt;Directives go into your html. They can be declared as tags, attributes, classes (huh?) or even comments (whattt???). This makes it really hard to tell a normal attribute versus a directive, and you’re no longer safe (or comfortable at least) to change the html, since you could be removing a directive or a directive parameter without notice.&lt;/p&gt;

&lt;p&gt;This is a really dangerous way to work. Comments and css classes shouldn’t be allowed by angular to start with, but some more thought should be done when designing your app and make directives as clear as possible, since the html becomes the API for them, so you should make that API clear for the user, which may or may not be yourself.
And even when you get that part clear, there’s still some other details that are not clear to the user. Like the type of scope the directive uses (isolated, no scope?, same scope?), whether it depends on some upper value in the scope, and stuff like that. It doesn’t have a clear layer where your data is safely hidden from.&lt;/p&gt;

&lt;h2 id=&quot;cannot-be-used-to-run-server-side-in-a-decent-way&quot;&gt;Cannot be used to run server side in a decent way&lt;/h2&gt;

&lt;p&gt;Angular needs a DOM to work. This is unlike other approaches where string templates are used, or even a virtual representation of the DOM that is not coupled to an existing DOM. And in the server we don’t have a DOM available. At least not a real one. We have some libraries that create DOM structures that claim to be compatible, and they may be up to some extent, but they won’t be exactly the DOM that angular needs.&lt;/p&gt;

&lt;p&gt;One approach for rendering server side with angular is by using a headless browser to execute angular and then get the rendered html from there. That is not an optimal solution since it requires a browser to be up and running, which causes a lot of overhead to the request.&lt;/p&gt;

&lt;h2 id=&quot;you-need-to-use-low-level-apis-really-soon&quot;&gt;You need to use low level APIs really soon&lt;/h2&gt;

&lt;p&gt;A good practice in angular is to break up your app into modular directives with specific functionality. In those places, you need to couple with both the scope and the DOM. If you do anything beyond trivial, you’ll find yourself starting to use &lt;code class=&quot;highlighter-rouge&quot;&gt;$apply&lt;/code&gt; because you’ll be outside the context where angular knows what to do. Especially if you start using external plugins that manipulate the DOM.&lt;/p&gt;

&lt;p&gt;Also, both in directives and in controllers, if you really want to react to changes in the data and not rely on the view calling you to update based on changes of the input models, you’ll start using &lt;code class=&quot;highlighter-rouge&quot;&gt;$watch&lt;/code&gt; a lot too. While this is not complex at all, and it’s not hard to reason (though it’s easy to cause loops if you update state when watching changes that trigger other watches and so on), you get out of the simple and wonderful land where angular does the job for you, and you need to keep telling angular what to do.&lt;/p&gt;

&lt;p&gt;It’s as if angular was a magician, but one that likes to reveal its tricks as soon as it shows them to you.&lt;/p&gt;

&lt;h2 id=&quot;performance-improvements-are-too-granular-and-not-at-the-correct-points&quot;&gt;Performance improvements are too granular, and not at the correct points&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngModelOptions&lt;/code&gt; is a directive option that allows you to reduce the number of digests to be done on the model attached to it. But really? I need to do performance optimization in the &lt;em&gt;view template&lt;/em&gt;? Isn’t there some kind of place I can hook to add an optimization, which is not invasive and is in a clear, explicit way where I can see it? Or even a way to apply global optimizations?&lt;/p&gt;

&lt;p&gt;Performance should be a secondary thing to do with your app. So good performance strategies are ones that are applied as cross cutting concerns, or be configuration options of the library, or hooks.&lt;/p&gt;

&lt;p&gt;It’s ok to have some performance optimizations inlined in the code in some particular cases, but let’s at least not put those in the html, the most brittle place in your app. Views should remain logic less and unaware of performance optimizations as much as possible.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;For all the above reasons, and some other subjective ones that I didn’t write here because they are, well, subjective, I don’t recommend angular as the tool to use when building interactive UIs. There are much better alternatives, that have a much richer philosophy and strong concepts. One big example of this is &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. I suggest that you give it a chance and see what it has to offer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>From Backbone Views To React</title>
   <link href="https://leoasis.github.io/posts/2014/03/22/from_backbone_views_to_react"/>
   <updated>2014-03-22T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2014/03/22/from_backbone_views_to_react</id>
   <content type="html">&lt;p&gt;Today I’d like to talk about why I happened to like React, or why I moved from using traditional Backbone views to React components. Well, not actually traditional Backbone views, since I used (actually still use) Marionette together with Handlebars templates and Rivets model binding, which happen to be a great combination, but the truth is that React changes the approach in such a way some problems just dissapear for the developer. In any case, I will share my usage of these other tools combined in a future post, since I think it’s worth sharing, but that’s for another day. Today, I’ll talk about React. With Backbone.&lt;/p&gt;

&lt;h2 id=&quot;backbone-views&quot;&gt;Backbone Views&lt;/h2&gt;

&lt;p&gt;If I had to suggest a guide to learn Backbone best practices, I’d suggest &lt;a href=&quot;http://pragmatic-backbone.com&quot;&gt;Pragmatic Backbone&lt;/a&gt;. I’ve found a lot of gold there, and also validated a lot of other practices that I found were the best in my experience. However, there were some things about what is said there that I didn’t agree that much with. Hey, it’s a free world!&lt;/p&gt;

&lt;p&gt;Particularly, the &lt;a href=&quot;http://pragmatic-backbone.com/views&quot;&gt;views&lt;/a&gt; section talks about a fact that made some noise to me when I first read it. It was about making sure that the only place to put any logic to manipulate the DOM should be placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method. And more so, whenever anything changed that was of interest by the view, just re-render the view. Hey, that’s rather inefficient, isn’t it? Rewrite the whole view when I just need to modify a single span tag? And what about forms? Re-rendering would cause the focus to be lost, or some other state that was not yet transferred to the models. Then, the article continues to talk about adding conditional logic in the render method to try to only change what’s different. That would cause a lot of if-else statements, or, at least, a very large render method. Why not handle changes separately and just change what’s needed there? That’s how model binding libraries work anyway. And also, as I was using them, I didn’t have to actually write any code in the view, only add some attributes in the view’s template to mark those as bindable to the model’s properties. So as I didn’t have to write any additional code that manipulated the DOM, it was implicitly there, spread in a lot of listeners of properties and touching different parts of the view.&lt;/p&gt;

&lt;p&gt;But then, what’s the benefit of having just a single function to manipulate the DOM of any given view? Well, to start with, you have a method that whenever called will render the view in sync with the model it represents, it is a &lt;em&gt;complete&lt;/em&gt; representation of the model state. Also, if the model state does not change, the render method will render the same thing always, so we can think of it as being a &lt;em&gt;pure function&lt;/em&gt; with respect to the model state. And we get the benefits of having a &lt;em&gt;pure function&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;easily testable due to it just being a matter of input/ouput expectations (no side effects),&lt;/li&gt;
  &lt;li&gt;idempotent, so that it doesn’t matter if you call it once or many times with the same input, it will render the same thing,&lt;/li&gt;
  &lt;li&gt;easily composable, since they are no more than functions that take some parameters and return some input, so we can build reusable pure functions to create a bigger pure function composed of those little ones,&lt;/li&gt;
  &lt;li&gt;subject to optimization: if you reason about pure functions, there are a lot of things you can derive and apply to them, like memoization, paralellization, optimizing the order in which they are called, and more.&lt;/li&gt;
  &lt;li&gt;declarative representation, since the composition of rendering functions of the internal components denote the actual thing we’re trying to render.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if you could take advantage of that and had this enforced directly so that you don’t have to be careful of not manipulating DOM outside the render method? And what if we could have all this and make it performant as well?&lt;/p&gt;

&lt;h2 id=&quot;and-then-came-react&quot;&gt;And then came React&lt;/h2&gt;

&lt;p&gt;It wasn’t the first time I saw React that it cliked me. As the docs say, give it five minutes. I started grasping the benefits of React while learning the design, the API, what it really provided. It’s not performance. At least, not ONLY performance. It’s a functional way to think about the UI, by thinking of components with a single render method that must be a pure function in terms of the components properties and state.&lt;/p&gt;

&lt;p&gt;And it turned out that while migrating some of the views I had with Marionette, Rivets and Handlebars, a lot of problems regarding model binding and synchronization just weren’t there, I could think about rendering the whole stuff always and React would then manage to optimally update the DOM.&lt;/p&gt;

&lt;p&gt;Let’s see a simple example in both ways to show you what this means:&lt;/p&gt;

&lt;p&gt;First for Backbone.View with Marionette and Rivets:
&lt;script src=&quot;https://gist.github.com/leoasis/9701509.js?file=marionette_rivets.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And now with React:
&lt;script src=&quot;https://gist.github.com/leoasis/9701509.js?file=react.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Notice that in the React version, we’re not using any plugin or library, just plain React and Backbone. Actually, the only thing we need is a small mixin to &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt; the component whenever any event happens in the model or collection. It’s really simple:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leoasis/9701509.js?file=react_backbone.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it! You have a list of elements that updates whenever the collection or any item changes. To make a fair comparison, think of what Marionette and Rivets are doing internally listening to events in the models and collections. Now React allows us to completely remove that code and create components by thinking about what to render, not how, and that is by rendering everything into a Virtual DOM that can later be used to optimize the actual DOM manipulation.&lt;/p&gt;

&lt;h2 id=&quot;other-benefits-from-react&quot;&gt;Other benefits from React&lt;/h2&gt;

&lt;p&gt;We also have some secondary benefits of using a level of indirection when rendering the DOM. Since the Virtual DOM is just plain Javascript, it can be easily created on the server. And then we can calculate the first state of the entire DOM to generate the html for the page. We’d get server side rendering almost for free! We only need to send the same props to the client and make React do the DOM reconciliation to continue from what was rendered.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The End&lt;/h2&gt;

&lt;p&gt;Well, this is the story and the reasons why I started migrating my Backbone.Views into React components. This is a journey that I’ve just started, so I will keep posting my learnings along the way.&lt;/p&gt;

&lt;p&gt;Every day I’m more convinced that functional programming ideas are best to create simpler, more declarative, more correct, less buggy, less cumbersome code. Hope I sprinkled you with some functional powder and hope you start learning about it! Start with React!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing ActiveRecord Futures</title>
   <link href="https://leoasis.github.io/posts/2013/05/16/activerecord-futures"/>
   <updated>2013-05-16T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2013/05/16/activerecord-futures</id>
   <content type="html">&lt;p&gt;I’m back! Long time no see!&lt;/p&gt;

&lt;p&gt;I’ve been in a mix of lazyness, busy, short on ideas to post, and waiting to finish some projects I’ve been working on.&lt;/p&gt;

&lt;p&gt;This is one of them. I’ve released a gem and reached a feature-enough state, enough at least to write a post about it. The idea grew from past experience with .NET and NHibernate, and trying to find something similar in the Ruby world, especially in the Rails world.&lt;/p&gt;

&lt;p&gt;If you don’t want to read the story and motivation of it, and just want to rush to the code, here it is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/leoasis/activerecord-futures&quot;&gt;https://github.com/leoasis/activerecord-futures&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;What I wanted to tackle with this gem was the fact that most performance problems in any web application are due to IO. Especially database IO. As you may already know, reading from disk or from the network are costly operations. And if you have your database in a separate server, which you should in production, you have both!&lt;/p&gt;

&lt;p&gt;Also, if database access is done synchronously, it will block, wasting precious time that you could be using to do other stuff. Well, you know, you could access asynchronously, and have all IO access non blocking. But I am talking about Rails here, so let’s stick with blocking access.&lt;/p&gt;

&lt;p&gt;So the first thing you should try to do is have the least number of queries per request you can have. Trying to eagerly include associations when you know that you will need them right away, avoid select n + 1, caching, and all that stuff. Those tips are vital to increasing the performance of our app, but still, there’s more you can do.&lt;/p&gt;

&lt;p&gt;It’s a very common thing to need several queries to fulfill a request. And they are not always solvable eagerly including associations, since those queries do not always involve associations. For example, say you want to have a list of articles that is paginated. You would do something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inside an action in a controller...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@articles_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, you are using a gem to paginate, and not doing this manually. I did this to show you more explicitly that pagination involves always two queries to the database. Well, you might say that there’s no way to reduce those 2 queries any further, and you’d be right. You &lt;em&gt;DO&lt;/em&gt; need those 2 queries. But do you need to go &lt;em&gt;twice&lt;/em&gt; to the database and ask for a single query each time? No! we could issue both queries in a single round trip, using multiple statements.&lt;/p&gt;

&lt;p&gt;Before going further with this, let’s see another example. Suppose you are now diplaying the index page of a marketplace, where you see the newest articles, the top shoppers, the top purchased categories and interesting articles based on your previous purchases. You may have something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@newest_articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published_at desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@top_shoppers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;purchase_count desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@top_categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_purchased&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@interesting_articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interesting_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here you see again that we cannot reduce the query amount any further, since that is exactly the info that we need to show. Still, we’re making 4 database round trips, without counting the potential extra one for &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;. We can do better than that!&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Meet &lt;a href=&quot;https://github.com/leoasis/activerecord-futures&quot;&gt;ActiveRecord::Futures&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gem extends ActiveRecord by allowing it to do just that: batch queries in a single round trip to the database. It makes use of multiple statements, which is simply sending a set of queries in a single text command, and receiving a response that is the set of results of those queries. Internally the gem multiplexes the results to the corresponding places.&lt;/p&gt;

&lt;p&gt;Using the future pattern, you build up your relation with the conditions that you need, and before retrieving the result, you tell it that you want a “future value”, that is, a value that you will use later on. Let’s use the pagination example for this. This is how you would rewrite it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inside an action in a controller...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@articles_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;future_count.value&lt;/code&gt; changes? Let’s see what this does. The &lt;code class=&quot;highlighter-rouge&quot;&gt;future&lt;/code&gt; call tells the relation that you want the result from the query it builds, but not yet. It enqueues the query in a list, waiting to be sent when it really needs to. &lt;code class=&quot;highlighter-rouge&quot;&gt;future_count&lt;/code&gt; does something similar. But instead of equeuing the query of the relation, it enqueues the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; of it.&lt;/p&gt;

&lt;p&gt;Now here comes the important part. When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; on the object returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;future_count&lt;/code&gt;, we are now saying that we want the result &lt;em&gt;now&lt;/em&gt;. We are triggering the future. And when that happens, all the queued queries will be sent at once to the database, then received at once after the &lt;em&gt;single round trip&lt;/em&gt;, and sent back to the respective futures. So &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; will return the result of the count query, and enumerating  the &lt;code class=&quot;highlighter-rouge&quot;&gt;@articles&lt;/code&gt; (or calling &lt;code class=&quot;highlighter-rouge&quot;&gt;to_a&lt;/code&gt;) will return the array of articles. One thing to note here is that when we do the latter action, &lt;em&gt;no query will be sent&lt;/em&gt;, since the result is already there, it came from the previous action.&lt;/p&gt;

&lt;p&gt;This is what we gain. Same amount of queries, less round trips to the database. Nice, isn’t it?&lt;/p&gt;

&lt;p&gt;That’s the idea behind &lt;a href=&quot;https://github.com/leoasis/activerecord-futures&quot;&gt;ActiveRecord::Futures&lt;/a&gt;. If you want to see more, just go to the &lt;a href=&quot;https://github.com/leoasis/activerecord-futures&quot;&gt;Github repo&lt;/a&gt; and check the Readme.&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Javascript object creation patterns</title>
   <link href="https://leoasis.github.io/posts/2013/01/24/javascript-object-creation-patterns"/>
   <updated>2013-01-24T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2013/01/24/javascript-object-creation-patterns</id>
   <content type="html">&lt;p&gt;I’m writing this post because my folks at work thought it might be helpful, since not all of the devs out there are familiar with the way that Javascript objects and prototypes work.&lt;/p&gt;

&lt;p&gt;These concepts are basic for all Javascript developers, and by basic I mean that in the way of “building the basis for the rest of the concepts you’ll learn in Javascript”, and not the “it’s sooo trivial, how can’t you know that?” meaning.&lt;/p&gt;

&lt;p&gt;This is the summary of the patterns I’ll cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Object literal&lt;/li&gt;
  &lt;li&gt;Function that returns an object&lt;/li&gt;
  &lt;li&gt;Constructor function&lt;/li&gt;
  &lt;li&gt;Constructor function with prototype&lt;/li&gt;
  &lt;li&gt;Object.create&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;object-literal&quot;&gt;Object literal&lt;/h2&gt;

&lt;p&gt;This is the most used pattern. It’s just defining the properties of an object between curly braces. That’s it.
You can create one time objects by using the object literal and assigning the properties and methods you need.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm awesome!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm lame :(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The good thing about this pattern is its simplicity. Just create an object right away and start using it. The bad thing is that it is explicit: you need to specify each and every property that the object has, there is no “class” already defined elsewhere that you can just use to create an instance with.&lt;/p&gt;

&lt;p&gt;This pattern is mostly suitable for creating one time objects, singleton objects, or objects that act as hashes.
It is not good for creating multiple similar objects, because by definition, this pattern is a one time creational one: you define the object and you get it built.&lt;/p&gt;

&lt;h2 id=&quot;function-that-returns-an-object&quot;&gt;Function that returns an object&lt;/h2&gt;

&lt;p&gt;This patterns adds into the previous one, by encapsulating the object definition inside a function. It is just the factory method pattern.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesomeness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm awesome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lameness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm lame :(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesomeness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lameness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This one is suitable for creating complex objects, and you don’t want the caller to know how it is built. It also adds a way to define “private” methods, by declaring them inside the scope of the factory function, which will not be visible outside that scope.&lt;/p&gt;

&lt;p&gt;As we’re creating a full blown new object each time we call the function, we have memory usage issues if we want to create a lot of “instances” (actually, to the engine they are independent objects that happen to have properties and functions that behave the same).&lt;/p&gt;

&lt;h2 id=&quot;constructor-function&quot;&gt;Constructor function&lt;/h2&gt;

&lt;p&gt;This pattern is similar to the previous one, but with some subtle differences. We don’t return the object anymore, in fact, the function itself doesn’t return anything. Also, we set the object-to-be-constructed’s properties by using &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. There is also another difference in the caller, and it’s an important one: the function is called with a prefixed &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator. This indicates that we are using that function as a constructor. Basically what it does internally is creating a new object, making it accessible to the constructor via the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; keyword, assigning the object’s &lt;em&gt;prototype&lt;/em&gt; to the one pointed by the function’s &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; property, and returning it implicitly. We’ll see that thing about prototypes in the following pattern, so for now just look at this example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Some &quot;private&quot; methods&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesomeness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm awesome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lameness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm lame :(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesomeness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lameness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As it is so similar to the previous pattern, it remains useful in the same scenarios or needs. As a drawback, you &lt;em&gt;have&lt;/em&gt; to remember to call that function with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator. If you don’t, it will be treated as a regular function, and in regular functions &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; points to the global object, that is, &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; for browsers and &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; for nodejs.&lt;/p&gt;

&lt;h2 id=&quot;constructor-function-with-prototype&quot;&gt;Constructor function with prototype&lt;/h2&gt;

&lt;p&gt;This patterns makes use of the previously described &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; property from the function, to set the object’s &lt;em&gt;prototype&lt;/em&gt; (note that I’m making a distinction here, since those two concepts, while related, are not the same).&lt;/p&gt;

&lt;p&gt;We could rewrite the previous example like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm awesome!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm lame :(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s the difference? Well to understand that, we need to know that in Javascript, every object has an internal property (not accessible, at least not in a standard way) that is the &lt;em&gt;prototype&lt;/em&gt;. This &lt;em&gt;prototype&lt;/em&gt; is another object, which will be used in the lookup chain for the methods being called in the object.
Also, a function (which is also an object in Javascript) contains a property called &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;, which is not the function’s &lt;em&gt;prototype&lt;/em&gt;, but a special property that the engine uses when using the function as a constructor (using the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword) to assign the &lt;em&gt;prototype&lt;/em&gt; to the newly created object.&lt;/p&gt;

&lt;p&gt;In the example, we’re constructing a new object, &lt;code class=&quot;highlighter-rouge&quot;&gt;guy&lt;/code&gt;, that has a &lt;em&gt;prototype&lt;/em&gt; which contains a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;aboutMe&lt;/code&gt;. With the lookup chain, we can call &lt;code class=&quot;highlighter-rouge&quot;&gt;guy.aboutMe()&lt;/code&gt; and it will finally call the &lt;em&gt;prototype&lt;/em&gt;’s method.&lt;/p&gt;

&lt;p&gt;So what’s the benefit of doing this? As you can see, we’re defining a set of methods and properties to be shared by the instances created using that constructor, just like in the patterns before, but in this case, this is &lt;em&gt;true&lt;/em&gt; sharing: all the instances have a &lt;em&gt;prototype&lt;/em&gt; which is the &lt;em&gt;same&lt;/em&gt; object for all. In terms of performance, this is a huge win if we’re creating a lot of instances, since the methods and properties will be in just one object, and not copied all over the instances.&lt;/p&gt;

&lt;p&gt;One thing to emphasize here, is that the Function’s &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; property is a &lt;em&gt;reference&lt;/em&gt; to the &lt;em&gt;prototypes&lt;/em&gt; of the objects created by that function as a constructor. So as a reference, we can get access to it and modify it.&lt;/p&gt;

&lt;p&gt;Consider this code is after the code in the previous example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm beyond awesome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here what we’re doing is changing a method of the object that is the &lt;em&gt;prototype&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;guy&lt;/code&gt;. So now it is clear (perhaps not that clear?) that this code prints “I’m beyond awesome!”, because the aboutMe lookup goes up to the object’s &lt;em&gt;prototype&lt;/em&gt; and finds the new aboutMe method (oh, now I got it).&lt;/p&gt;

&lt;p&gt;This example is somewhat different, consider that the previous code never happened, and instead this one did:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm beyond awesome!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Is this the same behavior as the example before? Not quite. If you look closer, you’ll see that what I just did was to change the function’s &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; &lt;em&gt;reference&lt;/em&gt; to a new object. So what this means is that we don’t have a reference to the &lt;em&gt;prototype&lt;/em&gt; of the instances created by the constructor anymore. This code will print “I’m awesome!”, and will ignore this new aboutMe method, because we never changed &lt;code class=&quot;highlighter-rouge&quot;&gt;guy&lt;/code&gt;’s &lt;em&gt;prototype&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But if we had something like this &lt;em&gt;after&lt;/em&gt; this previous example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newGuy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Larry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will indeed call the new &lt;code class=&quot;highlighter-rouge&quot;&gt;aboutMe&lt;/code&gt; method. Why? Because at the moment this instance was created, the function’s &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; was already the new one, so &lt;code class=&quot;highlighter-rouge&quot;&gt;newGuy&lt;/code&gt; now has the &lt;em&gt;prototype&lt;/em&gt; currently referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy.prototype&lt;/code&gt;, which is different than &lt;code class=&quot;highlighter-rouge&quot;&gt;guy&lt;/code&gt;’s &lt;em&gt;prototype&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prototype-chain&quot;&gt;Prototype chain&lt;/h3&gt;

&lt;p&gt;Remember that I said that the object’s &lt;em&gt;prototypes&lt;/em&gt; are just objects? So this &lt;em&gt;prototype&lt;/em&gt; could have its own &lt;em&gt;prototype&lt;/em&gt; that in turn could have its own &lt;em&gt;prototype&lt;/em&gt; and so on… This is what is called a &lt;em&gt;prototype chain&lt;/em&gt;, which is essentially the lookup chain that the engine uses to find the code to execute upon a given call.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;prototype chain&lt;/em&gt; is something like inheritance, since basically that is just a lookup chain to know which code to execute. So we could create a new constructor function that has its &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; be an object that has as &lt;em&gt;prototype&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt;, so that the objects created with this constructor would “extend” &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt;’s functionality:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aaaaaaahhhh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well, that works, but it is not pretty. First, we’re duplicating the constructor, and second, we’re creating a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt; and passing null parameters (and this actually works because the constructor &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt; does not play enough with the parameters to make all this explode with a null exception). There is a technique to fix this, that is used by many libraries that implement “class extension”, “class inheritance” and such. It’s something like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// empty constructor&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aaaaaaahhhh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewGuy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What did we do here? We’ll get to the constructor in a minute. Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctor&lt;/code&gt; constructor function. It is an empty function, but we set its &lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt; property to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt;’s one. So now if we create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;ctor&lt;/code&gt; instance, we’re going to have an empty object whose &lt;em&gt;prototype&lt;/em&gt; is the same as the one we would get if we created an instance using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt; constructor. That’s the key!&lt;/p&gt;

&lt;p&gt;As for the constructor, notice we’re just calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt; constructor and passing whatever arguments we get from outside. Notice here we didn’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;Guy&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, since that would create a new object, and what we want now is to get the same code executed when creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;NewGuy&lt;/code&gt; instance.&lt;/p&gt;

&lt;h2 id=&quot;objectcreate&quot;&gt;Object.create&lt;/h2&gt;

&lt;p&gt;Phewww that last one was pretty long. Got your breath back already? Good. One more to go!&lt;/p&gt;

&lt;p&gt;There is one more pattern, which is not available in all browsers (well, it IS in all browsers but IE &amp;lt; 9). It goes like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guyPrototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;aboutMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm awesome!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I'm lame :(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guyPrototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;guy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we’re doing something similar to the previous pattern. We’re creating objects that have a &lt;em&gt;prototype&lt;/em&gt;. This time we do that differently, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt;. What this does is another way to do what &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; does for constructor functions. You set the prototype object as the parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt; and it returns a new object whose &lt;em&gt;prototype&lt;/em&gt; is that passed object.&lt;/p&gt;

&lt;p&gt;This pattern is useful for creating multiple instances from a prototype, just like the previous one. It is also easier to understand (once you get what this prototype fuzz is all about) than the &lt;em&gt;constructor&lt;/em&gt; functions with &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. Some people also like this more because it indicates more clearly the prototipal nature of Javascript.&lt;/p&gt;

&lt;p&gt;For the old IE lovers, you can get similar functionality by creating a shim of &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt; with this code (&lt;a href=&quot;http://www.crockford.com&quot;&gt;Crockford&lt;/a&gt;’s example):&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or use this optimized version that reuses the constructor function:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you understand how &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; works, I’ll let you understand this code as an exercise.&lt;/p&gt;

&lt;p&gt;This shim is not complete though. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt; has an optional second parameter used to define the new object’s extra properties. Anyway, you can add that to your shim if you like, or just use it without this second parameter.&lt;/p&gt;

&lt;h2 id=&quot;to-sum-up&quot;&gt;To sum up&lt;/h2&gt;

&lt;p&gt;We’ve covered different patterns for creating objects in Javascript. It’s important that you understand the pros and cons of each pattern, because none is pure evil or pure goodness, each pattern work in some cases, does not work in others, or is overkill for some other case. It is your job to use them wisely, with a fundamented reason.&lt;/p&gt;

&lt;p&gt;Hope this helped someone! You’re free to go or leave a comment, whatever you please :)&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello, World!</title>
   <link href="https://leoasis.github.io/posts/2013/01/10/hello-world"/>
   <updated>2013-01-10T00:00:00-03:00</updated>
   <id>https://leoasis.github.io/posts/2013/01/10/hello-world</id>
   <content type="html">&lt;p&gt;Well, the title for my first post is kind of mandatory, right? No? Well,
I did it anyway, so… whatever…&lt;/p&gt;

&lt;p&gt;I’ve been wanting to have a blog for some time right now, but I could never
find the time to actually do it. Guess the beginning of the year is a great
moment for starting stuff.&lt;/p&gt;

&lt;p&gt;What will you find here? Well, I’m mostly interested in web technology, so
expect a lot from that, but I may post about other things as well. Heck, it’s
my blog, so I can do whatever I want!&lt;/p&gt;

&lt;p&gt;I also want to thank &lt;a href=&quot;https://twitter.com/holman&quot;&gt;@holman&lt;/a&gt;, from which I borrowed this Jekyll theme.
I will start building my own style as time goes by, but this is great ground to
start building up.&lt;/p&gt;

&lt;p&gt;So well, this is it, short and sweet! Stay around for some upcoming stuff I have
to share, and, when comments are enabled, give me some feedback! Or, as you
know, you can start giving me feedback through my &lt;a href=&quot;https://twitter.com/leogcrespo&quot;&gt;twitter account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</content>
 </entry>
 

</feed>
